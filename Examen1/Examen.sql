/*
EJERCICIO 1
Se desea realizar una consulta para obtener los siguientes campos department_id,
department_name, street_address y postal_code. La consulta debe involucrar las tablas
necesarias para obtener los campos y se deben obtener los registros cuyo valor del
manager_id NO sea NULL. La informaci�n obtenida se debe imprimir en pantalla
mediante un bloque an�nimo y la forma de procesar la consulta ser� mediante un bulk
collect. Es necesario imprimir en la pantalla cu�ntos registros se obtuvieron*/

SET SERVEROUTPUT ON;

DECLARE
    TYPE FILA IS RECORD(
        DEPART_ID  DEPARTMENTS.DEPARTMENT_ID%TYPE,
        DEPART_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE,
        ADDRESS LOCATIONS.STREET_ADDRESS%TYPE,
        POST_COD LOCATIONS.POSTAL_CODE%TYPE,
        MAN_ID DEPARTMENTS.MANAGER_ID%TYPE
    );

    TYPE TBL_CONS_20181004394 IS TABLE OF FILA INDEX BY PLS_INTEGER;
    DATOS_EMPRESA TBL_CONS_20181004394;
    ITERACION NUMBER(10) := 0;

BEGIN 
    SELECT 
    DEPARTMENTS.DEPARTMENT_ID,DEPARTMENTS.DEPARTMENT_NAME,LOCATIONS.STREET_ADDRESS,LOCATIONS.POSTAL_CODE,DEPARTMENTS.MANAGER_ID 
    BULK COLLECT INTO DATOS_EMPRESA
    FROM DEPARTMENTS 
    INNER JOIN LOCATIONS ON DEPARTMENTS.LOCATION_ID=LOCATIONS.LOCATION_ID 
    WHERE MANAGER_ID IS NOT NULL;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad de registros es: ' || SQL%ROWCOUNT);
  
   
    WHILE  (ITERACION<SQL%ROWCOUNT) LOOP
        DBMS_OUTPUT.PUT_LINE('El codigo de departamento es: ' || DATOS_EMPRESA(ITERACION+1).DEPART_ID);
        DBMS_OUTPUT.PUT_LINE('El departamento es: ' ||DATOS_EMPRESA(ITERACION+1).DEPART_NAME);
        DBMS_OUTPUT.PUT_LINE('La direccion es: ' ||DATOS_EMPRESA(ITERACION+1).ADDRESS);
        DBMS_OUTPUT.PUT_LINE('El codigo postal es: ' ||  DATOS_EMPRESA(ITERACION+1).POST_COD);
        DBMS_OUTPUT.PUT_LINE('El Manager id es: ' || DATOS_EMPRESA(ITERACION+1).MAN_ID);
        DBMS_OUTPUT.PUT_LINE(CHR(13));
        ITERACION:=ITERACION+1;       
        
    END LOOP;
  
END;


/*
EJERCICIO 2
Crear un campo autoincrementable en todas las llaves primarias de cada una de las
tablas de la base de datos (excluir las tablas JOB_GRADES y JOB_HISTORY), el
aumento de las secuencias debe ser de 2 en 2 y deben comenzar en el valor de 20.
Realizar al menos 2 Insert en cada tabla que permita comprobar el funcionamiento de la
secuencia. No utilizar tiggers para gestionar estas secuencias*/

CREATE SEQUENCE SQ_tblCountries_20181004394 START WITH 20 INCREMENT BY 2;
CREATE SEQUENCE SQ_tblDepartments_20181004394 START WITH 20 INCREMENT BY 2;
CREATE SEQUENCE SQ_tblEmployees_20181004394 START WITH 20 INCREMENT BY 2;
CREATE SEQUENCE SQ_tblJobs_20181004394 START WITH 20 INCREMENT BY 2;
CREATE SEQUENCE SQ_tblLocations_20181004394 START WITH 20 INCREMENT BY 2;
CREATE SEQUENCE SQ_tblRegions_20181004394 START WITH 20 INCREMENT BY 2;

INSERT INTO REGIONS VALUES (SQ_tblRegions_20181004394.NEXTVAL,'NORTE AMERICA');
INSERT INTO REGIONS VALUES (SQ_tblRegions_20181004394.NEXTVAL,'SUR AMERICA');

INSERT INTO COUNTRIES VALUES (SQ_tblCountries_20181004394.NEXTVAL,'Brasil',2);
INSERT INTO COUNTRIES VALUES (SQ_tblCountries_20181004394.NEXTVAL,'Argentina',2);

INSERT INTO LOCATIONS VALUES(SQ_tblLocations_20181004394.NEXTVAL,'BARRIO LA RONDA', '324543', 'Tegucigalpa','Francisco Morazan','26'); 
INSERT INTO LOCATIONS VALUES(SQ_tblLocations_20181004394.NEXTVAL,'CENTRO', '32423', 'TTTT', 'WEEE', '22'); 

INSERT INTO DEPARTMENTS VALUES (SQ_tblDepartments_20181004394.NEXTVAL, 'EEEEEE', '2322','3222');
INSERT INTO DEPARTMENTS VALUES (SQ_tblDepartments_20181004394.NEXTVAL, 'QQQQQ', '111','77');

INSERT INTO JOBS VALUES (SQ_tblJobs_20181004394.NEXTVAL, 'LLLLL', '768678','999');
INSERT INTO JOBS VALUES (SQ_tblJobs_20181004394.NEXTVAL, 'WWWW', '3333','222');

INSERT INTO EMPLOYES VALUES (SQ_tblEmployees_20181004394.NEXTVAL, 'PEDRO','MOLINA','ZZZ','111.944.3453','20-DIC-2020','AD_PRES','30000',NULL,NULL,90);
INSERT INTO EMPLOYES VALUES (SQ_tblEmployees_20181004394.NEXTVAL, 'JOSE','FERNANDO','SSS','333.555.3456','20-DIC-2020','AD_PRES','45000',NULL,NULL,90);




/*
EJERCICIO 3
Crear un bloque an�nimo que imprima en pantalla la siguiente informaci�n JOB_ID,
JOB_TITLE, MIN_SALARY, MAX_SALARY, DEPARTMENT_ID, DEPARTMENT_NAME,
START_DATE, END_DATE y NOMBRE COMPLETO del empleado. Este bloque an�nimo
debe mostrar todos los registros obtenidos en la consulta.*/

DECLARE
 TYPE FILA IS RECORD(
        ID_JOB  JOBS.JOB_ID%TYPE,
        TITLE_JOB JOBS.JOB_TITLE%TYPE,
        SALARY_MIN JOBS.MIN_SALARY%TYPE,
        SALARY_MAX JOBS.MAX_SALARY%TYPE,
        DEPART_ID JOB_HISTORY.DEPARTMENT_ID%TYPE,
        DEPART_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE,
        START_DAT JOB_HISTORY.START_DATE%TYPE,
        END_DAT JOB_HISTORY.END_DATE%TYPE,
        NAME_EMPLOYEES EMPLOYEES.FIRST_NAME%TYPE
    );

    TYPE TBL_REGISTRO_20181004394 IS TABLE OF FILA INDEX BY PLS_INTEGER;
    DATOS_REGISTRO TBL_REGISTRO_20181004394;
    ITERACION NUMBER(10) := 0;
BEGIN
  SELECT JOBS.JOB_ID, JOBS.JOB_TITLE, JOBS.MIN_SALARY, JOBS.MAX_SALARY, DEPARTMENTS.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME,
    JOB_HISTORY.START_DATE, JOB_HISTORY.END_DATE, EMPLOYEES.FIRST_NAME||' '|| EMPLOYEES.LAST_NAME    
    BULK COLLECT INTO DATOS_REGISTRO
    FROM JOBS 
    INNER JOIN JOB_HISTORY ON JOBS.JOB_ID = JOB_HISTORY.JOB_ID 
    INNER JOIN DEPARTMENTS ON JOB_HISTORY.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID 
    INNER JOIN EMPLOYEES ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad de registros es: ' || SQL%ROWCOUNT);
  
   
    WHILE  (ITERACION<SQL%ROWCOUNT) LOOP
        DBMS_OUTPUT.PUT_LINE('El Job_id es: ' || DATOS_REGISTRO(ITERACION+1).ID_JOB);
        DBMS_OUTPUT.PUT_LINE('El job_title es: ' ||DATOS_REGISTRO(ITERACION+1).TITLE_JOB);
        DBMS_OUTPUT.PUT_LINE('El min_salary es: ' ||DATOS_REGISTRO(ITERACION+1).SALARY_MIN);
        DBMS_OUTPUT.PUT_LINE('El max_salary es: ' ||  DATOS_REGISTRO(ITERACION+1).SALARY_MAX);
        DBMS_OUTPUT.PUT_LINE('El Department_id es: ' || DATOS_REGISTRO(ITERACION+1).DEPART_ID);
        DBMS_OUTPUT.PUT_LINE('El Department_name es: ' ||DATOS_REGISTRO(ITERACION+1).DEPART_NAME);
        DBMS_OUTPUT.PUT_LINE('El start_name es: ' ||DATOS_REGISTRO(ITERACION+1).START_DAT);
        DBMS_OUTPUT.PUT_LINE('El end_date es: ' ||  DATOS_REGISTRO(ITERACION+1).END_DAT);
        DBMS_OUTPUT.PUT_LINE('El Nombre completo es: ' || DATOS_REGISTRO(ITERACION+1).NAME_EMPLOYEES);
        DBMS_OUTPUT.PUT_LINE(CHR(13));
        ITERACION:=ITERACION+1;       
      
    END LOOP;
END;


/*
EJERCICIO 4
Crear una tabla llamada REGISTRO_LOGS que tenga los campos ID_LOG NUMBER,
FECHA_LOG TIMESTAMP, DESCRIPCION_LOG VARCHAR2(500), USUARIO
VARCHAR2(50), TIPO_OPERACION VARCHAR2(20), TABLA_AFECTADA
VARCHAR2(30). El campo ID_LOG debe guardar valores secuenciales gestionados
mediante un Trigger y se deben aumentar de 5 en 5. El campo TIPO_OPERACION
guardar� si la operaci�n fue un INSERT, DELETE o UPDATE. Por �ltimo, crear tres
Triggers, uno en la tabla EMPLOYEES que se ejecute despu�s de realizar un INSERT y
otro en la tabla DEPARTMENTS que se ejecute antes de realizar un UPDATE y el �ltimo
trigger en la tabla JOB_HISTORY que se ejecute despu�s de realizar un DELETE. Todos
los triggers deben guardar la informaci�n en la tabla REGISTRO_LOGS de las
operaciones de inserci�n, actualizaci�n o delete.*/

CREATE TABLE REGISTRO_LOGS(
    ID_LOG NUMBER PRIMARY KEY,
    FECHA_LOG TIMESTAMP,
    USUARIO VARCHAR2(50),
    TIPO_OPERACION VARCHAR2(20),
    TABLA_AFECTADA VARCHAR2(30)
);

DROP TABLE REGISTRO_LOGS;

CREATE SEQUENCE SQ_tblRegistro_20181004394
START WITH 1
INCREMENT BY 5;

CREATE OR REPLACE TRIGGER TG_insertEMPLOYEES_20181004394
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS
    (
        ID_LOG,
        FECHA_LOG, 
        USUARIO, 
        TIPO_OPERACION,
        TABLA_AFECTADA
    ) 
    VALUES (
        SQ_tblRegistro_20181004394.NEXTVAL,
        SYSTIMESTAMP,
        USER, 
        'INSERT',
        'EMPLOYEES'
    );
END;

CREATE OR REPLACE TRIGGER TG_updateDEPARTMENTS_20181004394
BEFORE UPDATE ON DEPARTMENTS
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS
    (
        ID_LOG,
        FECHA_LOG, 
        USUARIO, 
        TIPO_OPERACION,
        TABLA_AFECTADA
    ) 
    VALUES (
        SQ_tblRegistro_20181004394.NEXTVAL,
        SYSTIMESTAMP,
        USER, 
        'UPDATE',
        'DEPARTMENTS'
    );
    
END;

DROP TRIGGER TG_insertEMPLOYEES_20181004394;

CREATE OR REPLACE TRIGGER TG_deleteJobHISTORY_20181004394
AFTER DELETE ON JOB_HISTORY
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS
    (
        ID_LOG,
        FECHA_LOG, 
        USUARIO, 
        TIPO_OPERACION,
        TABLA_AFECTADA
    ) 
    VALUES (
        SQ_tblRegistro_20181004394.NEXTVAL,
        SYSTIMESTAMP,
        USER, 
        'DELETE',
        'JOB_HISTORY'
    );
END;



DECLARE
BEGIN

INSERT INTO EMPLOYEES VALUES (91, 'dsf','SDF','Qgdfdf','435.676.7568','20-JUN-2020','AD_PRES','30000',NULL,NULL,90);
 /* UPDATE DEPARTMENTS SET DEPARTMENT_NAME = 'Industria' WHERE DEPARTMERNT_NAME='IT';
  DELETE FROM JOB_HISTORY WHERE  EMPLOYEE_ID = 102;*/
END;
